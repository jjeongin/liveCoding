-- harmony and melody quick overview: http://tidalcycles.org/docs/reference/harmony_melody/

-- some sample folders have different pitched sounds which can be used for melodies
d1 $ s "arpy*16" # n (run 16) # room 0.4
d1 $ s "arpy" <| n "{0 1 2 3 4}%16" # room 0.4 -- keep the speed while dividing up the beats
d1 $ s "arpy*6" # n "0 1 2 3 4" # room 0.4
d1 $ s "arpy*5" # n "1 2 3 4 5" # room 0.4 -- pentonic scale

-- major scale (skipping black keys in piano) by numbers, each number is a semitone
-- * - pianotec 8
d1 $ s "sine*8" # up "0 2 4 5 7 9 11 12" # room 0.4

-- scale by notes
-- this is same as the code above
d1 $ s "sine*8" # up "c d e f g a b c6" # room 0.4 -- by default, code starts from octave 5
d1 $ s "sine*8" # up "c5 d5 e5 f5 g5 a5 b5 c6" # room 0.4

-- flats or sharps can be given with an f or an s
d1 $ s "sine*8" # up "c d e f g a bf c6" # room 0.4

-- the scale function interprets a pattern of note numbers into a particular named scale
-- this line sounds the same as above
d1 $ s "sine*8" # note (scale "major" "0 .. 8") # room 0.4

-- try this out, the pattern in scale is larger than 8 so it fits itself to 8
d1 $ s "sine*8" # note (scale "major" "-5 .. 7") # room 0.4

-- a different scale
d1 $ s "sine*8" # note ((scale "pelog" "0 .. 7")+4) # room 0.4

-- print out a list of scales
scaleList

d1 $ s "sine*8" # note (scale "pent" "0 .. 8") # room 0.4
d1 $ s "sine*8" # note (scale "majPent" "0 .. 8") # room 0.4

-- palindrome reverse pattern every other cycle
d1 $ palindrome $ s "sine*8" # note ((scale "pelog" "0 .. 7")+4) # room 0.4

-- chunk divides a pattern into a given number of parts,
-- then cycles through those parts in turn,
-- applying the given function to each part in turn (one part per cycle)
d1 $ chunk 4 (# note ((scale "pelog" "-7 .. 0")+4)) $ s "sine*8" # note ((scale "pelog" "0 .. 7")+4) # room 0.4

-- bite function allows you to slice each cycle into a given number of equal sized bits,
-- and then pattern those bits by number.
d1 $ bite 4 "0 2 1 <2 3>" $ s "sine*8" # note ((scale "pelog" "0 .. 7")+4) # room 0.4

-- shuffle takes a number and a pattern as input,
-- divides the pattern into the given number of parts,
-- and returns a new pattern as a random permutation of the parts, picking one of each per cycle.
-- This could also be called "sampling without replacement". (won't repeat a part)
d1 $ shuffle 8 $ s "sine*8" # note ((scale "pelog" "0 .. 7")+4) # room 0.4

-- scramble takes a number and a pattern as input,
-- divides the pattern into the given number of parts,
-- and returns a new pattern by randomly selecting from the parts (can repeat parts)
d1 $ scramble 8 $ s "sine*8" # note ((scale "pelog" "0 .. 7")+4) # room 0.4

-- we can make our own melody too (Ode to Joy)
-- notice the >| This says take the structure of the pattern from the left side instead of the right side
d1 $ s "sine" >| note ((scale "major" "<[2 2 3 4] [4 3 2 1] [0 0 1 2] [[2@3 1] 1]>")) # room 0.4

-- try scramble
d1 $ scramble 8 $ s "sine" >| note ((scale "major" "<[2 2 3 4] [4 3 2 1] [0 0 1 2] [[2@3 1] 1]>")) # room 0.4

-- sometimes by shuffle
d1 $ sometimesBy 0.4 (shuffle 8) $ s "sine" >| note ((scale "major" "<[2 2 3 4] [4 3 2 1] [0 0 1 2] [[2@3 1] 1]>")) # room 0.4

-- need t import the chords
import Sound.Tidal.Chords

-- these can give us more info
chordList
chordTable

-- after importing the chords we use chord names
d2 $ s "sine*2" # note "c'maj e'min" # room 0.4

-- struct can apply patterns to other patterns
-- in this case it's applying a euclidean rhythm to the chord and sound patterns
d2 $ struct "<t(3,8) t(3,8,1)>" $ s "sine" # note "c'maj e'min" # room 0.4

-- whenmod applies the function to the pattern,
-- when the remainder of the current loop number divided by the first parameter,
-- is greater or equal than the second parameter
d2 $ whenmod 4 3 (# note "f'maj a'min") $ struct "<t(3,8) t(3,8,1)>" $ s "sine" # note "c'maj e'min" # room 0.4

-- we can also make chords built off scale degrees
-- these are not semitones but degrees from whatever scale we indictate, then add a root to situate the scale around
d2 $ s "sine" >| note (scale "major" ("[0,2,4] [1,3,5]") + "c5")  # room 0.4

-- we can even just random numbers for our chords and see what sounds good
d2 $ struct "t(5,8,<0 1>)" $ s "sine" >| note (scale "major" ("[1,-3,6,7,-4] [2,3,6,7] [3,-6,-2,8,5,3]") + "c5") # room 0.4

-- can make a sort of melody over each cycle with one chord note
d2 $ s "sine" >| note (scale "major" ("[<-7 -5 -3 -1>,0,2](3,8)") + "c5") # room 0.4

-- arp can crate arpeggio patterns, there are dvarious pattern syou can try:
-- up down updown downup converge
-- diverge disconverge pinkyup pinkyupdown
-- thumbup thumbupdown
d1 $ fast 2 $ s "sine" >| note (arp "up" (scale "major" ("[0,2,4,6]") + "c5")) # room 0.4

-- adding different chord root notes, not to be confused with the root of the scale
d1 $ fast 2 $ s "sine" >| note (arp "updown" (scale "major" ("[0,2,4,6]"+"<0 0 2 3>") + "c5")) # room 0.4

-- instead of using a sample, there are a whole host of synthesizers you can use which can give more flexibility
-- https://tidalcycles.org/docs/patternlib/tutorials/synthesizers
-- notice the scale root is different (f4), but it still is the same scale as the samples above
-- each sample is not necessarily tuned tuned to C
-- the sine sample is tuned to F so supersaw we set the root to f4
d1 $ fast 2 $ s "supersaw" >| note (arp "updown" (scale "major" ("[0,2,4,6]"+"<0 0 2 3>") + "f4")) # room 0.4
d1 $ s "superhoover" >| note ((scale "major" "<[2 2 3 4] [4 3 2 1] [0 0 1 2] [[2@3 1] 1]>" + "f4")) # room 0.4

-- just some drum sounds for fun
d3 $ s "~ cp" # room 0.5
d4 $ fast 2 $ s "hh*2 hh*2 hh*2 <hh*6 [hh*2]!3>" # room 0.7 # gain (range 1 1.2 rand)

hush
